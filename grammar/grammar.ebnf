program:= <declaration>*;

(* declaration*)
<declaration> := functionDeclaration | <classDeclaration> | <statement>;
<functionDeclaration> := 'define function' <function>;
<classDeclaration> := 'define class' <identifer> ( 'extends' <identifer )? 'then' NEWLINE INDENT ('static'? (<function> | <assignment>)* ) DEDENT;

(* statements*)
<statement> := <expression> | <ifStatement> | <forStatement> | returnStatement | <expression> | <whileStatement> | block;
<while> := 'while' <expression> 'then' <block>;
<ifStatement> := 'if' <expression> 'then' <block>  ('else then' statement)?;
<forStatement> := 'for' <identifier> 'in' <list> <block> ;
<block> := NEWLINE INDENT <statement>* DEDENT;
<returnStatement> := 'return' <expression>?;
<breakStatement> := 'break';

(* expressions*)
<expression> := <assignment>;
<assignment> := ( <call> '.' )? <identifer> 'is' <assignment> | <logicOr>;
<logicOr> :=  <logicAnd> ('or' <logicAnd>)*;
<logicAnd> := <equality> ('and' equality)*;
<equality> := <comparison> (<equalityOperators> comparison)*;
<comparison> := <term> ( <comparisonOperators> <term> )*;
<term> := <factor> ( <termOperators> <factor> )* ;
<factor> := <unary> ( <factorizationOperators> <unary> )*;
<unary> := <unaryOperators>+ <unary> | <primary>;
<lambda> := 'lambda' <paramters>? 'then' <expression> | <primary>;
<call> := primary ( '(' arguments ')' | '.' <identifer> )*;
<primary> :=  <object> | "true" | "false" | "nothing" | '(' <expression> ')' | <identifer> | '[' <primary>* ']' | 'this' | 'parent' '(' <arguments>* ')' ;


(* Function *)
<function> := <identifier> '(' parameters? ')' <block>;
<parameters := <identifer> (',' <identifier>)*;
<arguments> := expression (',' expression)*;

(*types*)
<object> := <number> | <string> | <list>;
<list> := '[' object? (',' object)* ']';
<identifier> := '_'? <letter> ( <letter> | <digit>  )* ;
<number> :=  '-'? <digit>+ ('.' <digit>+)*;
<string> := '"' <letter>+ '"' ;

(* operators*)
<unaryOperators> := 'not' | '-' | 'increment' | 'incremented' | 'decrement' | 'decremented' | ( 'complement' | 'type' ) 'of';
<equalityOperators> := 'is equal to' | 'is not' ;
<comparisonOperators> := 'is greater than' | 'is less than'Â´| 'is equal or greater than' | 'is equal or less than';
<termOperators> := 'add' | 'plus' | 'subtract' | 'minus';
<factorizationOperators> := 'divide by' | 'multiply by';

(* basic types*)
<letter> := 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' 
        | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' 
        | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' 
        | 'V' | 'W' | 'X' | 'Y' | 'Z' | 'a' | 'b'
        | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i'
        | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p'
        | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w'
        | 'x' | 'y' | 'z' ;
<digit> := '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' ;